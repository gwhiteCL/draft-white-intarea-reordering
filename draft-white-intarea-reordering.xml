<?xml version="1.0" encoding="utf-8"?>
<!--
     draft-white-intarea-reordering-latest

     This template includes examples of most of the features of RFCXML with comments explaining
     how to customise them, and examples of how to achieve specific formatting.

     Documentation is at https://authors.ietf.org/en/templates-and-schemas
-->
<?xml-model href="rfc7991bis.rnc"?>  <!-- Required for schema validation and schema-aware editing -->
<!-- <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?> -->
<!-- This third-party XSLT can be enabled for direct transformations in XML processors, including most browsers -->

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<!-- If further character entities are required then they should be added to the DOCTYPE above.
     Use of an external entity file is not recommended. -->

<rfc
  xmlns:xi="http://www.w3.org/2001/XInclude"
  category="info"
  docName="draft-white-intarea-reordering-latest"
  ipr="trust200902"
  obsoletes=""
  updates=""
  submissionType="IETF"
  xml:lang="en"
  version="3">
<!--
    * docName should be the name of your draft
    * category should be one of std, bcp, info, exp, historic
    * ipr should be one of trust200902, noModificationTrust200902, noDerivativesTrust200902, pre5378Trust200902
    * updates can be an RFC number as NNNN
    * obsoletes can be an RFC number as NNNN
-->

  <front>
    <title abbrev="Packet Reordering">Proposal for Updates to Guidance on Packet Reordering</title> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#title-4 -->
    <!--  The abbreviated title is required if the full title is longer than 39 characters -->

    <seriesInfo name="Internet-Draft" value="draft-white-intarea-reordering-latest"/> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#seriesinfo -->
    <!-- Set value to the name of the draft  -->

    <author fullname="Greg White" initials="G." surname="White">
      <organization>CableLabs</organization> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#organization -->
      <address> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#address -->
        <postal>
          <country>US</country>
        </postal>
        <email>g.white@cablelabs.com</email>
      </address>
    </author>

    <author fullname="Ingemar Johansson" initials="I." surname="Johansson">
      <organization>Ericsson</organization> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#organization -->
      <address> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#address -->
        <postal>
          <country>SE</country>
        </postal>
        <email>ingemar.s.johansson@ericsson.com</email>
      </address>
    </author>
    <author fullname="Dibakar Das" initials="D." surname="Das">
      <organization>Intel</organization> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#organization -->
      <address> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#address -->
        <postal>
          <country>US</country>
        </postal>
        <email>dibakar.das@intel.com</email>
      </address>
    </author>
    <author fullname="Chris Box" initials="C." surname="Box">
      <organization>BT Group</organization> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#organization -->
      <address> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#address -->
        <postal>
          <country>GB</country>
        </postal>
        <email>chris.box@bt.com</email>
      </address>
    </author>

    <date year="2025"/> <!-- https://authors.ietf.org/en/rfcxml-vocabulary#date -->
    <!-- On draft subbmission:
         * If only the current year is specified, the current day and month will be used.
         * If the month and year are both specified and are the current ones, the current day will
           be used
         * If the year is not the current one, it is necessary to specify at least a month and day="1" will be used.
    -->

    <area>Internet</area>
    <workgroup>Internet Area Working Group</workgroup>
    <!-- "Internet Engineering Task Force" is fine for individual submissions.  If this element is
          not present, the default is "Network Working Group", which is used by the RFC Editor as
          a nod to the history of the RFC Series. -->

    <keyword>reordering link subnetwork</keyword>
    <!-- Multiple keywords are allowed.  Keywords are incorporated into HTML output files for
         use by search engines. -->

    <abstract>
      <t>Several link technology standards mandate that equipment guarantee in-order delivery of layer 2 frames, apparently due to a belief that this is required by higher layer protocols.  In addition, certain link types can introduce out-of-order arrivals at the end of the layer 2 link, which the receiving equipment is required to rectify by delaying higher sequenced frames until all lower sequenced frames can be delivered or are deemed lost.  The delaying of higher sequenced frames is generally done without any knowledge of the higher layer protocols in use, let alone any knowledge of higher layer protocol contexts (e.g. TCP connections) in the case that the layer 2 link is carrying a multiplex of such contexts. It could, for example, be the case that all of the higher sequenced frames being delayed are carrying packets for different layer 4 contexts than a single lower-sequenced frame that triggered the delay. The result is that this "resequencing" operation can introduce delays that result in degradation of performance rather than improving it.  Moreover, modern, performant TCP and QUIC implementations support features that significantly improve their tolerance to out-of-order delivery.</t>
      <t>This draft is intended to promote an analysis and discussion of the sensitivity of modern IETF protocols to out-of-order delivery, and to potentially develop new information for layer 2 technology standards regarding the need to assure in-order delivery to support IETF protocols.</t>

    </abstract>

  </front>

  <middle>

    <section>
    <!-- The default attributes for <section> are numbered="true" and toc="default" -->
      <name>Introduction</name>
      <t><xref target="RFC3819" section="15"/> provides advice to Internet subnetwork designers regarding packet reordering.
      The advice seems reasonable: "try to avoid packet reordering whenever possible, but not if doing so compromises efficiency, impairs reliability, or increases average packet delay."
      However, along with this guidance come a couple of warnings that appear to have driven subnetwork designers towards assuring in-order delivery even if efficiency is impaired or average packet delay is increased.
      These warnings relate to the potential performance cost for TCP (as it was then defined) that arises due to out-of-order arrivals, and to the fact that out-of-order delivery would cause problems for "every header compression scheme currently standardized for the Internet." </t>
      <t>The text of <xref target="RFC3819"/> does mention that research on improving TCP behavior in the face of packet reordering was underway.
      In the intervening 20+ years, that research has resulted in the definition of <xref target="RFC8985">RACK</xref> which significantly reduces TCP's sensitivity to out-of-order arrivals.
      In addition, <xref target="RFC9002" section="6.1"/> discusses the usefulness of implementing similar mechanisms in QUIC, and provides the protocol tools to do so.
      The result is that having the link-layer delay packets to provide them in-order to the transport layer was helpful multiple decades ago when TCP implementations had more naive algorithms and were very resource-constrained.
      Given how modern implementations work, this "resequencing" at the link-layer is almost always harmful.
      Modern TCP and QUIC stacks can handle reordering well, thanks to both protocol features and implementations having more memory to work with.
      For these implementations, the delay induced by L2 resequencing will generally cause more harm than good.
      Furthermore, one of the biggest motivators for QUIC was to break head-of-line blocking and allow out-of-order delivery to the application layer.
      At this point we have large bodies of data showing that this improves real-world performance.
      Moreover, older implementations of TCP that don't implement RACK don't fail in the presence of some out-of-order packets.
      They may see reduced performance, but they do have the ability to correctly handle the receipt of packets out of order.</t>

      <t>At the time of publication of <xref target="RFC3819"/>, the "ROHC" header compression framework defined in <xref target="RFC3095"/> stated an operating assumption that the network would provide in-order delivery.
      This assumption is discussed in detail in <xref target="RFC4224"/>, which provides guidance on implementing ROHC over channels that can reorder header-compressed packets, and explains different ways of implementing the profiles found in <xref target="RFC3095"/> over reordering channels.
      Subsequent to the publication of <xref target="RFC3819"/> the issue of reordering intolerance by ROHC was addressed by the development of ROHCv2 <xref target="RFC5225"/>, which lists tolerance to reordering as one of its significant improvements over ROHC.</t>

      <t>There may be other protocols or protocol implementations that are sensitive to reordering to some degree.  For instance, <xref target="RFC2983" section="4.1"/> discusses <xref target="RFC2401">IPSec</xref> and <xref target="RFC2661">L2TP</xref> as being sensitive to packet reordering.</t>

      <t>The current situation seems to be that several layer 2 technologies implement resequencing functions that increase cost and complexity of equipment, and may in many cases degrade network performance rather than improving it.  Any benefits of resequencing may be primarily limited to older protocol implementations e.g. maintaining the performance of older TCP implementations that are no longer widely used and may not be particularly performant by modern standards.</t>

    </section>

    <section>
      <name>Terminology</name>
      <t>In this document, we adopt the following terminology.</t>
        <dl newline="true">
          <dt>Reordering:</dt>
          <dd>The process where the packet/frame sequence is made out-of-order from the originally transmitted order. </dd>
          <dt>Resequencing:</dt>
          <dd>The process where an out-of-order packet/frame sequence is returned to the originally transmitted order.</dd>
        </dl>
      </section>



    <section>
      <name>Reordering in L2 Links</name>
      <t>In current L2 link technologies, frame reordering comes from two primary sources: multi-link aggregation and layer-2 retransmission.</t>
      <section>
        <name>Multi-Link Aggregation</name>
        <t>Some link technologies support the aggregation (within L2) of multiple links between a pair of nodes for the purpose of increasing the total capacity of the link.
        In many cases the individual links within the aggregation have different capacities and/or latencies from one another.
        When this is the case, the frame reception order differs from the frame transmission order.</t>
      </section>
      <section>
        <name>Layer 2 Retransmissions</name>
        <t>Some link technologies (particularly wireless), are subject to noise and interference that would result in an unacceptably high frame error rate if it were not corrected.
        These links commonly implement a method of acknowledgement and retransmission of lost frames, referred to as Automatic Repeat Request (ARQ).  When a frame loss affects one or more frames within a transmission, and the frame(s) at the end are unaffected, the retransmitted frames will arrive out of sequence from the original ordering.</t>
      </section>
    </section>



    <section>
      <name>Resequencing in L2 Standards</name>
      <t>This section discusses functions and requirements for resequencing in exising layer 2 standards.</t>

      <section>
        <name>LTE/5G</name>

        <t>Packet reordering can occur on both the MAC and the RLC layer in LTE and 5G systems. Packet resequencing occurs on the PDCP layer.</t>

        <t>On the MAC layer: An RLC packet data unit (RLC-PDU) is transmitted in one of up to 16 Hybrid ARQ processes on the MAC layer. This avoids the stop and wait for one transmission to succed before a new transmission can begin. Transmission on the MAC layer can however have a high block error rate (BLER), 10% or more is common especially when the traffic pattern and radio channel varies. Each retransmission adds a few milliseconds extra delay.</t>
        <t>This results in that packets are delivered out of order up to the RLC layer on the receiver side because some transmissions on the MAC layer may succeed in one transmission attempt while other transmissions may need several attepts, up to some given limit given by system configuration.</t>
        <t>HARQ failure is triggered when the max number of retransmissions is reached.</t>

        <t>On the RLC Layer: The RLC layer is configured in two typical ways.</t>

        <ul><li>RLC Unacknowledged mode (RLC-UM): Is typically used for VoIP services a.k.a VoLTE (Voice over LTE) or VoNR (Voice over NR) but can also be used for the transmission of low latency video. Data blocks are not retransmitted in this mode.</li>
        <li>RLC Acknowledged mode (RLC-AM): Is typically used for normal internet traffic, a.k.a Mobile Broadband (MBB). Retransmissions on this layer are less common than retransmissions on the MAC layer and they occur when HARQ failure is triggered on the MAC layer, or in the case that the MAC layer erroneously decodes a NACK as an ACK. Retransmission on the RLC layer causes 10s of milliseconds on extra delay, depending on how timers are configured.</li></ul>

        <t>Besides the causes for packet reordering listed above, packet reordering can occur with Dual Connectivity where 2 or more radio frequency bands are combined on the RLC layer, this because there can be a time skew of a few milliseconds over transport links between the  PDCP layer and the RLC layer(s).</t>

        <t>The RLC layer does resequencing on the RLC layer in LTE systems. On 5G systems however, resequencing is left to the PDCP layer. Resequencing on the PDCP layer is however optional according to the 5G standard but is mostly enabled out of concern for sensitivity to packet reordering on the transport and application layer.</t>

        <t>In addition radio bearers with robust header compression (RoHC) should enable resequencing.</t>
      </section>

      <section>
        <name>Wi-Fi</name>

        <t>The IEEE 802.11 specification (Wi-Fi) currently supports only in-order delivery.  The 802.11 protocols inherit traffic delivery requirements from the 802.1Q specification (see section 6.5.3 in 802.1Q), which only permits only in-order delivery.</t>

        <t>To utilize the medium efficiently, the 802.11 MAC aggregates data frames of a given traffic identifier (TID) and transmits them as a block. However, due to link errors, not all frames in the block may be received. A re-order buffer at the receiver holds up delivery of data frames if a frame ahead of it is missing. A separate reorder buffer is maintained for each of the 8 TIDs. A later retransmission may deliver the missing frame at which point the missing frame and subsequent frames are delivered.</t>

        <t>The process of in-order delivery is also taken advantage of as part of the security protocol. Each data frame is sequentially numbered with a packet number. To mitigate against a replay attack, the receiving MAC simply checks if the packet number of a received  data frames is higher than the highest received one for that TID.</t>

        <t>Allowing out-of-order delivery within the 802.11 specification for a given TID would require some adjustments to the 802.11 protocol. Some of the adjustments include the following:</t>
          <ul><li>The reorder buffer would need to release packets without waiting for older packets to be received.</li>
          <li>The replay detection mechanism would need to be updated to not drop an older missing frame when it is successfully retransmitted.</li></ul>

      </section>

      <section>
        <name>DOCSIS</name>
        <t>The Data-Over-Cable Service Interface Specifications provide broadband access over hybrid fiber-coaxial networks. The DOCSIS protocol does not support layer 2 retransmissions, but since the introduction of "channel bonding" functionality (a form of multi-link aggregation) in DOCSIS 3.0 in 2006, reordering can occur due to differences in capacity or latency between the bonded channels.  All equipment built to that and later versions of DOCSIS (including DOCSIS 3.1 and DOCSIS 4.0) is required to support specific resequencing features to guarantee in-order delivery.</t>

        <t>In the downstream direction (i.e. from the network to end-user) individual IP packets are encapsulated in layer 2 frames that generally include a 20-bit Downstream Service ID (DSID), a 1-bit Sequence Change Count, and a 16-bit Packet Sequence Number. The specifications include detailed, mandatory, requirements on the handling of these fields, including a requirement that cable modems support at least 16 simultaneous resequencing contexts, each of which having sufficient memory to hold packets for up to 13 ms (18 ms in older equipment) at the maximum forwarding rate of the device, mechanisms for rapid loss detection, and significant management and configuration mechanisms to support the feature.</t>

        <t>In the upstream direction (i.e. from the end-user to the network) individual IP packets are encapsulated in layer 2 frames, then concatenated together and fragmented into "segments" for transmission. The segment boundaries are determined by the size of the transmission opportunities (grants) and generally do not relate to the internal frame or packet boundaries. So, in general a segment could begin with the tail of one L2 frame, then have zero or more full L2 frames, then the head of a final frame. Each segment has a segment header which contains a 13-bit sequence number. The CMTS is required to reassemble the concatenated frame sequence, and forward the individual frames in order.</t>
      </section>


    </section>

    <section>
      <name>Proposed Updates to RFC3819 Guidance on Packet Reordering</name>
      <t>This draft proposes to replace the contents of <xref target="RFC3819" section="15"/> with the following text.</t>

      <t>The Internet architecture does not guarantee that packets will arrive
      in the same order in which they were originally transmitted;
      transport protocols must take this into account.</t>

      <t>An earlier definition of TCP <xref target="RFC2581"/><xref target="RFC3517"/><xref target="RFC5681"/><xref target="RFC6675"/> defined the "fast retransmit" algorithm,
      which recommended that a TCP receiver send an immediate duplicate ACK when an out-of-order segment arrives,
      and it recommended that the TCP sender use the arrival of 3 duplicate ACKs as an indication that a segment has been lost.
      This loss determination triggers a retransmission and a reduction of the congestion window.
      In the presence of packet reordering, this duplicate-ACK-based loss detection mechanism can incorrectly deem a packet lost, and thus trigger a spurious retransmission and an unnecessary congestion window reduction, both of which can negatively impact the performance of the connection.
      Thus, one outcome of the implementation and deployment of the fast retransmit algorithm is that TCPs became significantly more sensitive to network reordering.</t>

      <t>A more recent update to TCP <xref target="RFC8985"/> addresses this sensitivity by performing loss detection via time-based inferences derived from the ACK feedback, rather than using duplicate ACKs.
      In addition, <xref target="RFC9002" section="6.1"/> discusses the usefulness of implementing similar mechanisms in QUIC, and provides the protocol tools to do so.
      Implementations of these time-based loss detection methods have now been widely deployed.</t>

      <t><xref target="BPS99"/> cites reasons why it may undesirable to eliminate
      reordering.  There are situations where average packet latency can be
      reduced, link efficiency can be increased, and/or reliability can be
      improved if reordering is permitted.  Examples include certain high
      speed switches within the Internet backbone and the parallel links
      used over many Internet paths for load splitting and redundancy.</t>

      <t>Nonetheless, there may exist implementations of network protocols that do not work well in the presence of a significant amount of packet reordering.</t>

      <t>This suggests that subnetwork implementers should try to avoid packet
      reordering when possible, but not if doing so compromises
      efficiency, impairs reliability, or increases average packet delay.</t>
    </section>




    <section anchor="IANA">
    <!-- All drafts are required to have an IANA considerations section. See RFC 8126 for a guide.-->
      <name>IANA Considerations</name>
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security">
      <!-- All drafts are required to have a security considerations section. See RFC 3552 for a guide. -->
      <name>Security Considerations</name>
      <t>This document should not affect the security of the Internet.</t>
    </section>

    <!-- NOTE: The Acknowledgements and Contributors sections are at the end of this template -->
  </middle>

  <back>
    <references>
      <name>References</name>

      <references>
        <name>Informative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2401.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2661.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2983.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3095.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3819.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4224.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5225.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8985.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9002.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2581.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3517.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5681.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6675.xml"/>

        <reference anchor="BPS99" target="https://doi.org/10.1109/90.811445">
          <front>
            <title>Packet reordering is not pathological network behavior</title>
            <seriesInfo name="DOI" value="10.1109/90.811445"/>
            <seriesInfo name="IEEE/ACM Trans. Netw." value="Vol. 7, No. 6, pp. 789-798"/>
            <author surname="Bennett" initials="J.C.R."/>
            <author surname="Partridge" initials="C."/>
            <author surname="Shectman" initials="N."/>
            <date month="December" year="1999"/>
          </front>
        </reference>

      </references>
    </references>

    <section anchor="Acknowledgements" numbered="false">
      <!-- an Acknowledgements section is optional -->
      <name>Acknowledgements</name>
      <t></t>
    </section>

    <section anchor="Contributors" numbered="false">
      <!-- a Contributors section is optional -->
      <name>Contributors</name>
      <t>Thanks to all of the contributors.</t>
    </section>

 </back>
</rfc>
